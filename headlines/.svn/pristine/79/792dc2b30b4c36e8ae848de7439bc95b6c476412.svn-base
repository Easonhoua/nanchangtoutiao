import api from "@/api/index.js"

/**
 * 方法名称: 跳转到webView
 * 方法注释: 
 * 传入参数: webUrl->网页链接 webTitle->网页标题 webPic->网页图片
 * 返回数值: 
 */
function gotoWebView(webUrl, webTitle,webview,webPic) {
	webview=webview||'webView'
	if (webUrl) {
		var temUrl = encodeURIComponent(webUrl);
		////console.log("temUrltemUrl= ", temUrl);
		if (webTitle) {
			if(webPic){
				uni.navigateTo({
					url: "/pages/webView/"+webview+"?webUrl=" + temUrl + "&webTitle=" + webTitle + "&webPic=" + webPic
				})
			}else{
				uni.navigateTo({
					url: "/pages/webView/"+webview+"?webUrl=" + temUrl + "&webTitle=" + webTitle
				})
			}
		} else {
			uni.navigateTo({
				url: "/pages/webView/"+webview+"?webUrl=" + temUrl
			})
		}
	}
}

/**
 * 方法名称: 举报
 * 方法注释: 不用传任何参数,会先判断用户是否登录,登录之后才跳到举报页面
 * 传入参数: 无
 * 返回数值: 无
 */
function tipOff(relationId) {
	if (api.alreadyLogin()) {
		uni.navigateTo({
			url: "/pages/user/userIndex/inform?relationId="+relationId,
			animationType: "slide-in-bottom",
			animationDuration: 200
		})
	}
}

function checkAppVersion(updateFlag) {
	// #ifdef APP-PLUS
	var sendData ={
		"action":"upgrade"
	}
	if (uni.getSystemInfoSync().platform == "ios") {
		sendData.mod ="ios";
	}
	api.get("api/ncrb/", sendData, "N",false).then(res => {
		console.log("res = ", res);
		uni.setStorageSync("serviceVersion", res.data.version);
		uni.setStorageSync("description", res.data.desc);
		uni.setStorageSync("apkurl", res.data.apkurl);
		if(updateFlag){
			compareVersion(res.data.version, res.data.desc,res.data.apkurl);
		}
	});
	//#endif
}

function compareVersion(serviceVersion, description,apkurl) {
	// #ifdef APP-PLUS
	plus.runtime.getProperty(plus.runtime.appid, (wgtinfo) => {
		var localVersion = wgtinfo.version; //app本地应用版本号
		
		if (serviceVersion > localVersion) {
			console.log("serviceVersion="+serviceVersion);
			console.log("localVersion="+localVersion);
			const subNVue = uni.getSubNVueById('versionUpdateTip');
			// 在 subNVue/vue 页面触发事件  
			// $emit(eventName, data)  
			const app = getApp();
			app.globalData.updateTip = description;
			subNVue.show();
			// uni.showModal({ //提醒用户更新  
			// 	title: "版本更新啦",
			// 	showCancel: false,
			// 	confirmText: "立即更新",
			// 	content: description,
			// 	complete(e) {
			// 		if (e.confirm) {
			// 			uni.navigateTo({
			// 				url:'/pages/user/setting/versionUpdate'
			// 			});
			// 		}
			// 	}
			// })
		}
	})
	// #endif
}
function gotoDetail(detail) {
	if(detail.type && detail.type == 61){
		uni.navigateTo({
			url: '/pages/detail/explainDetails?id=' + detail.id
		});
	}else if(detail.style && detail.style == 'activity'){
		uni.navigateTo({
			url: '/pages/activity/activityDetails?id=' + detail.id
		});
	}else if(detail.style && detail.style == 'wenzheng'){
		uni.navigateTo({
			url: '/pages/inquire/details?id=' + detail.id
		});
	}else if(detail.url){
		if(detail.url == '#' || (detail.style == 'h5' && detail.url =='')){
		// uni.navigateTo({
		// 	url: '/pages/inquire/details?id=' + detail.id
		// });
		}else if(detail.url.indexOf("http://") >=0 || detail.url.indexOf("https://") >=0 ){
			if(detail.url.indexOf("unionid={unionid}") >=0){
				if(api.alreadyLogin()){
					detail.url = detail.url.replace(/{unionid}/,uni.getStorageSync("unionid"));
					gotoWebView(detail.url,detail.title,'',detail.pic);
				}
			}else{
				gotoWebView(detail.url,detail.title,'',detail.pic);
			}
		}else if(detail.url.indexOf("ncnews://") >=0){
			
			if(detail.url.indexOf("ncnews://upgrade") >=0){
				//给市长留言列表
				uni.navigateTo({
					url: '/pages/user/setting/versionUpdate'
				})
			}else if(detail.url.indexOf("wenzheng_list_10") >=0){
				//给市长留言列表
				uni.navigateTo({
					url: '/pages/inquire/inquireDetails'
				})
			}else if(detail.url.indexOf("wenzheng_list_12") >=0){
				//思想大讨论
				uni.navigateTo({
					url: '/pages/inquire/thoughtDiscussList'
				});
			}else if(detail.url.indexOf("wenzheng_send_") >=0){
				var type  = detail.url.split('wenzheng_send_')[1];
				//问政列表
				uni.navigateTo({
					url: '/pages/inquire/complaintSuggestionMessage?type='+type
				});
			}else if(detail.url.indexOf("wenzheng_list_") >=0){
				var type  = detail.url.split('wenzheng_list_')[1];
				//问政列表
				uni.navigateTo({
					url: '/pages/inquire/inquireList?type='+type
				});
			}else if(detail.url.indexOf("channel_") >=0){
				var type  = detail.url.split('channel_')[1];
				//新闻列表
				uni.navigateTo({
					url: '/pages/news/newsList?typeId='+type
				});
			}else if(detail.url.indexOf("article_") >=0){
				var id = detail.url.split('article_')[1];
				uni.navigateTo({
					url: '/pages/detail/details?id=' + id
				});
			}else if(detail.url.indexOf("ncnews://zt_") >=0){
				var zid = detail.url.split('ncnews://zt_')[1];
				uni.navigateTo({
					url: '/pages/news/topic?zid=' + zid
				});
			}else{
				uni.navigateTo({
					url: '/pages/detail/details?id=' + detail.id
				});
			}
		}
	}else{
		uni.navigateTo({
			url: '/pages/detail/details?id=' + detail.id
		});
	}
}

/**
 * 方法名称: js获取不通设备下的导航栏高度,单位是px
 * 方法注释: 使用JSON.parse之前先判断字符串是否可转为json数据
 * 传入参数: 字符串
 * 返回数值: string可以转json则返回true,否则返回false
 */
function getVarNaviBarHeight() {
	try {
		// #ifdef APP-PLUS
		return plus.navigator.getStatusbarHeight() * plus.screen.scale;
		// return uni.getSystemInfoSync().statusBarHeight + 44 + 'px';
		// #endif	
		// #ifdef H5
		return 44;
		// #endif
	} catch (e) {}
	return 64;
}

/**
 * 方法名称: 判断字符串是否可转为json数据
 * 方法注释: 使用JSON.parse之前先判断字符串是否可转为json数据
 * 传入参数: 字符串
 * 返回数值: string可以转json则返回true,否则返回false
 */
function isJsonString(str) {
	try {
		if (typeof JSON.parse(str) == "object") {
			return true;
		}
	} catch (e) {}
	return false;
}



function formatArray(array) {
	var theArray = [];
	for (var i = 0; i < array.length; i++) {
		if (array[i] && !(array[i] == 'undefined')) {
			theArray.push(array[i]);
		}
	}
	return theArray;
}

function dateCheck(RQ) {
	var date = RQ;
	var result = date.match(/^(\d{1,4})(-|\/)(\d{1,2})\2(\d{1,2})$/);

	if (result == null)
		return false;
	var d = new Date(result[1], result[3] - 1, result[4]);
	return (d.getFullYear() == result[1] && (d.getMonth() + 1) == result[3] && d.getDate() == result[4]);
}



function formatLocation(longitude, latitude) {
	if (typeof longitude === 'string' && typeof latitude === 'string') {
		longitude = parseFloat(longitude)
		latitude = parseFloat(latitude)
	}

	longitude = longitude.toFixed(2)
	latitude = latitude.toFixed(2)

	return {
		longitude: longitude.toString().split('.'),
		latitude: latitude.toString().split('.')
	}
}

function dateDiff(dateStr) {
	var date = new Date(dateStr);
	var nowdate = new Date();
	var diff = nowdate.getDate() - date.getDate();
	switch (diff) {
		case 0:
			return '今天'
			break
		case 1:
			return '昨天'
			break
		case 2:
			return '前天'
			break
		default:
			return diff + '天前'
			break;
	}
};

function formatMinutesTime(dateStr) {
	var _format = function(number) {
		return (number < 10 ? ('0' + number) : number);
	};
	var date = new Date(parseInt(dateStr));
	return _format(date.getHours()) + ':' + _format(date.getMinutes());
};

function formatTime(time) {
	if (typeof time !== 'number' || time < 0) {
		return time
	}

	var hour = parseInt(time / 3600)
	time = time % 3600
	var minute = parseInt(time / 60)
	time = time % 60
	var second = time

	return ([hour, minute, second]).map(function(n) {
		n = n.toString()
		return n[1] ? n : '0' + n
	}).join(':')
}

/**
 * 方法名称: 将日期格式化为某月某日
 * 方法注释: 比如传入2019-11-10,则返回11月10日
 * 传入参数: dateStr 日期字符串
 * 返回数值: 带有月日的日期字符串
 */
function formatMinutesDay(dateStr) {
	if (dateStr) {
		dateStr = dateStr.replace(/-/ig, "/");
	}
	
	var date = new Date(parseInt(dateStr));
	var _format = function(number) {
		return (number < 10 ? ('0' + number) : number);
	};
	return +_format(date.getMonth() + 1) + '月' + _format(date.getDate()) + "日";
};

function formatDateTime(dateStr) {
	var date;
	if (dateStr) {
		date = new Date(dateStr);
	} else {
		date = new Date();
	}

	var _format = function(number) {
		return (number < 10 ? ('0' + number) : number);
	};
	return date.getFullYear() + '-' + _format(date.getMonth() + 1) + '-' + _format(date.getDate()) + ' ' +
		_format(date.getHours()) + ':' + _format(date.getMinutes());
}


const formatDate = date => {
	if (!date instanceof Date) {
		date = new Date(date);
	}
	const year = date.getFullYear()
	const month = date.getMonth() + 1
	const day = date.getDate()
	return [year, month, day].map(formatNumber).join('-')
};
/**
 * 方法名称: 获取当前日期的前几天或者后几天
 * 方法注释: dayCount传入负数比如-3,表示获取当前日期的前3天,传入正数比如2,表示获取后天的日期
 * 传入参数: dayCount 正整数或者负整数
 * 返回数值: 前日期的前几天或者后几天的字符串
 */
const getDateWithCount = dayCount => {
	var dd = new Date();
	dd.setDate(dd.getDate() + dayCount); //获取AddDayCount天后的日期  
	var y = dd.getFullYear();
	var m = (dd.getMonth() + 1) < 10 ? "0" + (dd.getMonth() + 1) : (dd.getMonth() + 1); //获取当前月份的日期，不足10补0  
	var d = dd.getDate() < 10 ? "0" + dd.getDate() : dd.getDate(); //获取当前几号，不足10补0  
	return y + "-" + m + "-" + d;
};

const getTimeWithHour = hours => {
	var dd = new Date();
	var tt = dd.getTime();
	var ntt = tt + hours * 60 * 1000;
	dd.setDate(dd.getDate() + dayCount); //获取AddDayCount天后的日期  
	var y = dd.getFullYear();
	var m = (dd.getMonth() + 1) < 10 ? "0" + (dd.getMonth() + 1) : (dd.getMonth() + 1); //获取当前月份的日期，不足10补0  
	var d = dd.getDate() < 10 ? "0" + dd.getDate() : dd.getDate(); //获取当前几号，不足10补0  
	return y + "-" + m + "-" + d;
};


const getDaysByDateString = (dateString1, dateString2) => {
	var startDate = Date.parse(dateString1.replace('/-/g', '/'));
	var endDate = Date.parse(dateString2.replace('/-/g', '/'));
	var diffDate = (endDate - startDate) + 1 * 24 * 60 * 60 * 1000;
	var days = diffDate / (1 * 24 * 60 * 60 * 1000);
	//alert(diffDate/(1*24*60*60*1000));  
	return days;
}


/**
 * 方法名称: 获取当前日期的星期
 * 方法注释: dateString传入日期格式的字符串
 * 传入参数: dateString传入日期格式的字符串
 * 返回数值: 日期的星期
 */
const getDateWeekend = dateString => {
	var date = new Date(parseInt(dateString));
	var a = ["日", "一", "二", "三", "四", "五", "六"];
	var week = date.getDay();
	var str = "周" + a[week];
	return str;
};

const formatNumber = n => {
	n = n.toString()
	return n[1] ? n : '0' + n
};

var dateUtils = {
	UNITS: {
		'年': 31557600000,
		'月': 2629800000,
		'天': 86400000,
		'小时': 3600000,
		'分钟': 60000,
		'秒': 1000
	},
	humanize: function(milliseconds) {
		var humanize = '';
		for (var key in this.UNITS) {
			if (milliseconds >= this.UNITS[key]) {
				humanize = Math.floor(milliseconds / this.UNITS[key]) + key + '前';
				break;
			}
		}
		return humanize || '刚刚';
	},
	format: function(dateStr) {
		var date = this.parse(dateStr)
		var diff = Date.now() - date.getTime();
		if (diff < this.UNITS['天']) {
			return this.humanize(diff);
		}
		var _format = function(number) {
			return (number < 10 ? ('0' + number) : number);
		};
		return date.getFullYear() + '/' + _format(date.getMonth() + 1) + '/' + _format(date.getDate()) + '-' +
			_format(date.getHours()) + ':' + _format(date.getMinutes()) + '111';
	},
	parse: function(str) { //将"yyyy-mm-dd HH:MM:ss"格式的字符串，转化为一个Date对象
		var a = str.split(/[^0-9]/);
		return new Date(a[0], a[1] - 1, a[2], a[3], a[4], a[5]);
	},
	formatDate: function(dateStr) {
		//const mistiming = Math.round((Date.now() - new Date(dateStr).getTime()) / 1000)
		//const tags = ['年', '个月', '星期', '天', '小时', '分钟', '秒']
		//const times = [31536000, 2592000, 604800, 86400, 3600, 60, 1]
		//console.info("new Date(dateStr).getDate():" + new Date(dateStr).getDate() + "--" + Date.now());
		const mistiming = Math.round((Date.now() - new Date(dateStr)) / (24 * 60 * 60 * 1000))
		const tags = ['年', '个月', '星期', '天']
		const times = [31536000, 2592000, 604800, 86400]
		for (let i = 0; i < times.length; i++) {
			const inm = Math.floor(mistiming / times[i])
			if (tags[i] === '天') {
				switch (inm) {
					case 0:
						return '今天'
						break
					case 1:
						return '昨天'
						break
					case 2:
						return '前天'
						break
					default:
						return inm + tags[i] + '前'
						break;
				}
			}
			if (inm !== 0) {
				return inm + tags[i] + '前'
			}
		}
	},
};

/**
 * 方法名称: 将日期格式化为某月某日
 * 方法注释: 比如传入15800000000,则返回11月10日
 * 传入参数: dateStr 日期字符串
 * 返回数值: 带有月日的日期字符串
 */
function formatYearMinutesDay(dateStr) {
	var date = new Date(parseInt(dateStr));
	var _format = function(number) {
		return (number < 10 ? ('0' + number) : number);
	};
	return +date.getFullYear() + '年'+_format(date.getMonth() + 1) + '月' + _format(date.getDate()) + "日";
};
/**
 * 方法名称: 将日期格式化为某月某日
 * 方法注释: 比如传入15800000000,则返回11月10日
 * 传入参数: dateStr 日期字符串
 * 返回数值: 带有月日的日期字符串
 */
function formatYearMinutesDayFormt(dateStr) {
	var date = new Date(parseInt(dateStr));
	var _format = function(number) {
		return (number < 10 ? ('0' + number) : number);
	};
	return +date.getFullYear() + '-'+_format(date.getMonth() + 1) + '-' + _format(date.getDate()) + "";
};


/**
 * 方法名称: 将日期格式化为某月某日
 * 方法注释: 比如传入15800000000,则返回11/10
 * 传入参数: dateStr 日期字符串
 * 返回数值: 11/10
 */
function formatMonthDay(dateStr) {
	var date = new Date(parseInt(dateStr));
	var _format = function(number) {
		return (number < 10 ? ('0' + number) : number);
	};
	return _format(date.getMonth() + 1) + '/' + _format(date.getDate());
};
// 将一维数组拆分成二维数组
function multiArray(array) {
	const newArray = array.reduce((prev, next, index) => {
		if (index % 2 === 0) {
			prev.push([])
		}
		prev[prev.length - 1].push(next);
		return prev;
	}, []);
	return newArray
}
/**
 * 方法名称: 打开某个地点的所在位置的地图
 * 方法注释: 
 * 传入参数: 
 * 返回数值: 
 */
function openLocation(longitude, latitude, name, address) {
	uni.openLocation({
		longitude: Number(longitude),
		latitude: Number(latitude),
		name: name,
		address: address,
		fail() {
			uni.navigateBack({

			})
		}
	})
}
/**
 * 方法名称: 打开店铺地址的位置
 * 方法注释: 
 * 传入参数: shopInfo店铺信息必须包含经纬度/店铺名称/店铺地址
 * 返回数值: 无
 */
function openShopLocation(shopInfo) {
	if (!shopInfo) return;
	uni.openLocation({
		longitude: Number(shopInfo.coordinateLng),
		latitude: Number(shopInfo.coordinateLat),
		name: shopInfo.shopName,
		address: shopInfo.address,
		fail() {
			uni.navigateBack({

			})
		}
	})
}
/**
 * 方法名称: 导航至目的地
 * 方法注释: 需要传入目的地的经度、维度，如果不传默认目的是滕王阁，当前位置默认为用户所在位置，测试时可默认为南昌日报大厦
 * 传入参数: desLongitude->目的地的经度 desLatitude->目的地的纬度 desAddress->目的的地址名称，比如滕王阁
 * 返回数值: 无返回值，获取当前用户位置失败时会弹框提示
 */
function navigateToLocation(desLongitude = 115.881141, desLatitude = 28.681356, desAddress = '滕王阁') {
	// #ifdef APP-PLUS
	uni.getLocation({
		success: (res) => {
			//var src = new plus.maps.Point(115.885449,28.71359);	 		// 南昌日报大厦（高德坐标）
			// var dst = new plus.maps.Point(desLongitude,desLatitude);     // 目的地位置（高德坐标）

			//var src = new plus.maps.Point(115.885449,28.71359);	 		// 南昌日报大厦（高德坐标）
			// var dst = new plus.maps.Point(desLongitude,desLatitude);     // 目的地位置（高德坐标）
			////console.log(res.longitude, res.latitude);
			var src = new plus.maps.Point(res.longitude, res.latitude); // 当前位置 (高德坐标)
			var point = GPS.gcj_decrypt_exact(desLongitude, desLatitude)
			var dst = new plus.maps.Point(point.lon, point.lat); // 南昌滕王阁 (高德坐标)
			plus.maps.openSysMap(dst, desAddress, src);
		},
		fail: (err) => {

			var src = new plus.maps.Point(115.885449, 28.71359); // 南昌日报大厦（高德坐标）
			var dst = new plus.maps.Point(desLongitude, desLatitude); // 南昌滕王阁 (高德坐标)
			plus.maps.openSysMap(dst, desAddress, src);
			if (err.errMsg.indexOf("auth deny") >= 0) {
				// uni.showToast({
				// 	title: "访问位置被拒绝,请到设置中允许ye南昌开启位置访问权限"
				// })
			} else {
				// uni.showToast({
				// 	title: err.errMsg
				// })

			}
		}
	})
	// #endif

}

function distance(latA, lonA, latB, lonB) {
	return GPS.distance(latA, lonA, latB, lonB);
}
var GPS = {
	PI: 3.14159265358979324,
	x_pi: 3.14159265358979324 * 3000.0 / 180.0,
	delta: function(lat, lon) {
		// Krasovsky 1940
		//
		// a = 6378245.0, 1/f = 298.3
		// b = a * (1 - f)
		// ee = (a^2 - b^2) / a^2;
		var a = 6378245.0; //  a: 卫星椭球坐标投影到平面地图坐标系的投影因子。
		var ee = 0.00669342162296594323; //  ee: 椭球的偏心率。
		var dLat = this.transformLat(lon - 105.0, lat - 35.0);
		var dLon = this.transformLon(lon - 105.0, lat - 35.0);
		var radLat = lat / 180.0 * this.PI;
		var magic = Math.sin(radLat);
		magic = 1 - ee * magic * magic;
		var sqrtMagic = Math.sqrt(magic);
		dLat = (dLat * 180.0) / ((a * (1 - ee)) / (magic * sqrtMagic) * this.PI);
		dLon = (dLon * 180.0) / (a / sqrtMagic * Math.cos(radLat) * this.PI);
		return {
			'lat': dLat,
			'lon': dLon
		};
	},

	//WGS-84 to GCJ-02
	gcj_encrypt: function(wgsLat, wgsLon) {
		if (this.outOfChina(wgsLat, wgsLon))
			return {
				'lat': wgsLat,
				'lon': wgsLon
			};

		var d = this.delta(wgsLat, wgsLon);
		return {
			'lat': wgsLat + d.lat,
			'lon': wgsLon + d.lon
		};
	},
	//GCJ-02 to WGS-84
	gcj_decrypt: function(gcjLat, gcjLon) {
		if (this.outOfChina(gcjLat, gcjLon))
			return {
				'lat': gcjLat,
				'lon': gcjLon
			};

		var d = this.delta(gcjLat, gcjLon);
		return {
			'lat': gcjLat - d.lat,
			'lon': gcjLon - d.lon
		};
	},
	//GCJ-02 to WGS-84 exactly
	gcj_decrypt_exact: function(gcjLon, gcjLat) {
		var initDelta = 0.01;
		var threshold = 0.000000001;
		var dLat = initDelta,
			dLon = initDelta;
		var mLat = gcjLat - dLat,
			mLon = gcjLon - dLon;
		var pLat = gcjLat + dLat,
			pLon = gcjLon + dLon;
		var wgsLat, wgsLon, i = 0;
		while (1) {
			wgsLat = (mLat + pLat) / 2;
			wgsLon = (mLon + pLon) / 2;
			var tmp = this.gcj_encrypt(wgsLat, wgsLon)
			dLat = tmp.lat - gcjLat;
			dLon = tmp.lon - gcjLon;
			if ((Math.abs(dLat) < threshold) && (Math.abs(dLon) < threshold))
				break;

			if (dLat > 0) pLat = wgsLat;
			else mLat = wgsLat;
			if (dLon > 0) pLon = wgsLon;
			else mLon = wgsLon;

			if (++i > 10000) break;
		}
		//////console.log(i);
		return {
			'lon': wgsLon,
			'lat': wgsLat
		};
	},

	// two point's distance
	distance: function(latA = 115.857963, lonA = 28.6926, latB, lonB) {
		latA = latA || 115.857963, lonA = lonA || 28.6926
		var earthR = 6371000.;
		var x = Math.cos(latA * this.PI / 180.) * Math.cos(latB * this.PI / 180.) * Math.cos((lonA - lonB) * this.PI / 180);
		var y = Math.sin(latA * this.PI / 180.) * Math.sin(latB * this.PI / 180.);
		var s = x + y;
		if (s > 1) s = 1;
		if (s < -1) s = -1;
		var alpha = Math.acos(s);
		var distance = alpha * earthR;
		return distance;
	},
	outOfChina: function(lat, lon) {
		if (lon < 72.004 || lon > 137.8347)
			return true;
		if (lat < 0.8293 || lat > 55.8271)
			return true;
		return false;
	},
	transformLat: function(x, y) {
		var ret = -100.0 + 2.0 * x + 3.0 * y + 0.2 * y * y + 0.1 * x * y + 0.2 * Math.sqrt(Math.abs(x));
		ret += (20.0 * Math.sin(6.0 * x * this.PI) + 20.0 * Math.sin(2.0 * x * this.PI)) * 2.0 / 3.0;
		ret += (20.0 * Math.sin(y * this.PI) + 40.0 * Math.sin(y / 3.0 * this.PI)) * 2.0 / 3.0;
		ret += (160.0 * Math.sin(y / 12.0 * this.PI) + 320 * Math.sin(y * this.PI / 30.0)) * 2.0 / 3.0;
		return ret;
	},
	transformLon: function(x, y) {
		var ret = 300.0 + x + 2.0 * y + 0.1 * x * x + 0.1 * x * y + 0.1 * Math.sqrt(Math.abs(x));
		ret += (20.0 * Math.sin(6.0 * x * this.PI) + 20.0 * Math.sin(2.0 * x * this.PI)) * 2.0 / 3.0;
		ret += (20.0 * Math.sin(x * this.PI) + 40.0 * Math.sin(x / 3.0 * this.PI)) * 2.0 / 3.0;
		ret += (150.0 * Math.sin(x / 12.0 * this.PI) + 300.0 * Math.sin(x / 30.0 * this.PI)) * 2.0 / 3.0;
		return ret;
	}
};

function friendlyDate(timestamp) {
	var formats = {
		'year': '%n% 年前',
		'month': '%n% 月前',
		'day': '%n% 天前',
		'hour': '%n% 小时前',
		'minute': '%n% 分钟前',
		'second': '%n% 秒前',
	};

	var now = Date.now();
	var seconds = Math.floor((now - timestamp) / 1000);
	var minutes = Math.floor(seconds / 60);
	var hours = Math.floor(minutes / 60);
	var days = Math.floor(hours / 24);
	var months = Math.floor(days / 30);
	var years = Math.floor(months / 12);

	var diffType = '';
	var diffValue = 0;
	if (years > 0) {
		diffType = 'year';
		diffValue = years;
	} else {
		if (months > 0) {
			diffType = 'month';
			diffValue = months;
		} else {
			if (days > 0) {
				diffType = 'day';
				diffValue = days;
			} else {
				if (hours > 0) {
					diffType = 'hour';
					diffValue = hours;
				} else {
					if (minutes > 0) {
						diffType = 'minute';
						diffValue = minutes;
					} else {
						diffType = 'second';
						diffValue = seconds === 0 ? (seconds = 1) : seconds;
					}
				}
			}
		}
	}
	return formats[diffType].replace('%n%', diffValue);
}

/**
  * 方法名称: 日期字符串转时间戳
  * 方法注释: 时间戳值转到秒，不到毫秒
  * 传入参数: dateString 日期字符串
  * 返回数值: 时间戳
*/
function dateStringToTimestamp(dateString){
	dateString = dateString.substring(0,16);//截取到秒
	dateString = dateString.replace(/-/g,'/'); //必须把日期'-'转为'/'
	var timestamp = new Date(dateString).getTime();
	timestamp = timestamp/1000;
	console.log("timestamp == ",timestamp);
	return timestamp;
}
/**
  * 方法名称: 时间戳转日期字符串
  * 方法注释: 装换结果截取到天，不截取到时分秒
  * 传入参数: timestamp 时间戳
  * 返回数值: 日期字符串
*/
function timestampToDateString(timestamp){
	var d = new Date(timestamp * 1000);    //根据时间戳生成的时间对象
	var date = (d.getFullYear()) + "-" + 
	           (d.getMonth() + 1) + "-" +
	           (d.getDate())// + " " + 
	           // (d.getHours()) + ":" + 
	           // (d.getMinutes()) + ":" + 
	           // (d.getSeconds());
	console.log("datedate = ",date);
	return date;
			   
}

/**
 * 分享-获取服务商列表
 * 返回: 服务商列表
 */
function getShareList(){
	var shareList = [];
	uni.getProvider({//获取服务商
		service:'share',
		success:function(res){
			console.log("服务商信息: " + JSON.stringify(res));
			if(res.provider.length == 0){
				res.provider = ["weixin","copyLink"];
			}else{
				res.provider.push("copyLink");
			}
			for (var i = 0; i < res.provider.length; i++) {
				var item = res.provider[i];
				if (item == 'weixin') {
					shareList.push(setupShareItem('weixin', "微信", "WXSceneSession"));
					shareList.push(setupShareItem('weixin', "朋友圈", "WXSenceTimeline"));
				}
				//复制链接
				if (item == 'copyLink') {
					shareList.push(setupShareItem('copyLink', "复制链接", "copyLink"))
				}
				// if (item == 'sinaweibo') {
				// 	shareList.push(self.setupShareItem("weibo", "微博", "weibo"));
				// }
				// if (item == 'qq') {
				// 	shareList.push(self.setupShareItem("qq", "qq", "qq"));
				// 	// 不能直接分享到QQ空间，可以分享到QQ，然后在QQ的界面里选择QQ空间。
				// 	// shareList.push(self.setupShareItem("zone","qq空间"));
				// }
			}
			console.log("服务商列表: " + JSON.stringify(shareList));
		},
		fail:function(res){
			console.log("获取分享服务商列表失败: " + JSON.stringify(res));
		}
	})
	return shareList;
}

/**
 * 分享-获取服务商对应图片
 * 参数: provider 服务商名称
 * 参数: title 标题
 * 参数: scene 场景
 * 返回: 服务商对应图片
 */
function setupShareItem(provider,title,scene){
	var item = {
		provider: provider,
		scene: scene,
		title: title,
		image: "/static/img/share/" + scene + ".png"
	}
	return item;
}

/**
 * 分享-分享-分享微信或者qq或者其它
 * 参数: item 选中的服务商信息(对象)
 * 参数: detail 分享的内容信息(对象)
 * 返回: 是否分享成功
 */
function clickShareItem(item,detail){
	var isShare = false;
	//detail.link = detail.link.replace("{unionid}",uni.getStorageSync("unionid"));
	// if (true) {
	if (uni.getSystemInfoSync().platform == "ios") {
		uni.downloadFile({
		    url: detail.pic, //仅为示例，并非真实的资源
		    success: (res) => {
		        if (res.statusCode === 200) {
					plus.zip.compressImage({
						src:res.tempFilePath,
						dst:"_doc/share.png",
						quality:20,
						overwrite:true,
						format:"png",
						width:"100px",
						height:"100px"
					},
					function() {
						detail.pic = "_doc/share.png";
						uni.share({
							provider: item.provider,
							scene: item.scene,//必填: provider为weixin时
							type: item.scene == 'qq' ? 1 : 0,//选填: 0为图文，qq不支持
							title: detail.title,//选填: 
							summary: detail.desc,//type=1时必填: 分享内容的摘要
							href: detail.link,//type=0时必填: 跳转链接
							imageUrl: detail.pic,//type=0、2、5时必填: 图片大于20kb时不显示,推荐使用小于20Kb的图片
							//mediaUrl:'',//type 为 3、4 时必选: 音视频地址
							//miniProgram:{},//type 为 5 时必选: 分享小程序必要参数
							success:function(res){//调用成功
								console.log("分享调用成功: " + JSON.stringify(res));
								isShare = true;
								api.toastTipsTime("分享成功",1500);
							},
							fail:function(error){//调用失败
								console.log("分享调用失败: " + JSON.stringify(error));
								isShare = false;
							}
						})
					},function(error) {
						isShare = false;
						console.log("Compress error!",error);
					});
		        }
		    }
		});
	}else{
		uni.share({
			provider: item.provider,
			scene: item.scene,//必填: provider为weixin时
			type: item.scene == 'qq' ? 1 : 0,//选填: 0为图文，qq不支持
			title: detail.title,//选填: 
			summary: detail.desc,//type=1时必填: 分享内容的摘要
			href: detail.link,//type=0时必填: 跳转链接
			imageUrl: detail.pic,//type=0、2、5时必填: 图片大于20kb时不显示,推荐使用小于20Kb的图片
			//mediaUrl:'',//type 为 3、4 时必选: 音视频地址
			//miniProgram:{},//type 为 5 时必选: 分享小程序必要参数
			success:function(res){//调用成功
				console.log("分享调用成功: " + JSON.stringify(res));
				isShare = true;
				api.toastTipsTime("分享成功",1500);
			},
			fail:function(error){//调用失败
				console.log("分享调用失败: " + JSON.stringify(error));
				isShare = false;
			}
		})
	}
	return isShare;
}

module.exports = {
	isJsonString: isJsonString,
	formatTime: formatTime,
	formatLocation: formatLocation,
	dateUtils: dateUtils,
	dateDiff: dateDiff,
	formatMinutesTime: formatMinutesTime,
	formatMinutesDay: formatMinutesDay,
	formatDate: formatDate,
	formatDateTime: formatDateTime,
	getDateWithCount: getDateWithCount,
	getDateWeekend: getDateWeekend,
	getDaysByDateString: getDaysByDateString,
	dateCheck: dateCheck,
	multiArray: multiArray,
	navigateToLocation: navigateToLocation,
	distance: distance,
	formatArray: formatArray,
	getVarNaviBarHeight: getVarNaviBarHeight,
	openLocation: openLocation,
	openShopLocation: openShopLocation,
	checkAppVersion: checkAppVersion,
	tipOff: tipOff,
	gotoWebView: gotoWebView,
	friendlyDate:friendlyDate,
	dateStringToTimestamp : dateStringToTimestamp,
	timestampToDateString : timestampToDateString,
	formatYearMinutesDay:formatYearMinutesDay,
	formatYearMinutesDayFormt:formatYearMinutesDayFormt,
	formatMonthDay:formatMonthDay,
	gotoDetail:gotoDetail,
	getShareList:getShareList,
	clickShareItem:clickShareItem
}
